version "3.3.0"

#include "ZScript/W2Util.zsc"
#include "ZScript/W2Data.zsc"
#include "ZScript/W2PlayerHandler.zsc"
#include "ZScript/W2Skybox.zsc"
#include "ZScript/W2AmbientActors.zsc"

const WeathremumVersion = "0.3a";


class WeathremumHandler: EventHandler {
	bool mustCreateGeneralSectorsData;		// "PlayerEntered()" is called before "WorldLoaded()".

	W2LevelGeneralData w2level;
	W2PlayerHandler playerHandlers[ MAXPLAYERS ], initCurW2PlayerHandler;
	int initCurW2SurfaceType;

	uint updateSectorCurIndex, updateSectorsMaxTickAmount, totalLevelSectors;

	override void OnRegister() {
		SetOrder( WeathremumHandlerOrder );

		W2Global.Log( LL_Debug, String.Format( "%s::OnRegister(). Handler order 0x%X.", GetClassName(), WeathremumHandlerOrder ) );

		mustCreateGeneralSectorsData = true;
		w2level = new( 'W2LevelGeneralData' );

		W2Global.Log( LL_Detailed, "Weathremum v" .. WeathremumVersion .. " handler initialized." );

		Super.OnRegister();
	}


	private void setNextToOutdoorSectorData( Line curline, Sector ls ) {
		W2SectorData closeSectorData = w2level.allSectorsData[ ls.Index() ];

		if ( ls.GetTexture( Sector.ceiling ) != skyflatnum ) {
			closeSectorData.w2type = W2ST_NextToOutdoor;
			w2level.corniceLinesFlags[ curline.Index() ] = 1;
		}
	}

	void UpdateW2SectorSurfaceType( out W2SectorData w2secdata, Sector sec ) {
		w2secdata.lastFloorTexture = sec.GetTexture( Sector.FLOOR );

		EWeathremumSectorType w2oldSectype = w2secdata.w2type;

		// Understanding the sector floor terrain Weathremum type:
		String floorTexName = TexMan.GetName( w2secdata.lastFloorTexture );
		String floorTexNameLeft4 = floorTexName.Left( 4 );
		String floorTexNameLeft5 = floorTexName.Left( 5 );
		String floorTexNameLeft6 = floorTexName.Left( 6 );

		bool isSlime00Slime08 = ( floorTexNameLeft6 == "SLIME0" && floorTexName.CharCodeAt( 6 ) <= 0x38 );

		if ( floorTexNameLeft6 == "FWATER" || ( isSlime00Slime08 && sec.damageamount ) ) {
			w2secdata.w2type = W2ST_Water;

		} else if ( floorTexNameLeft5 == "METAL" ) {
			w2secdata.w2type = W2ST_MetalSurface;

		} else if ( floorTexNameLeft5 == "FLOOR" ) {
			String postfix = floorTexName.Mid( 5, 3 );

			if ( postfix == "0_5" || postfix == "0_6" || postfix == "0_7" || postfix == "3_3" || postfix == "4_8" || postfix == "5_1" )
				w2secdata.w2type = W2ST_MetalSurface;

		} else if ( floorTexName == "GATE4" || floorTexName == "SLIME14" || floorTexName == "SLIME15" || floorTexName == "SLIME16" || floorTexNameLeft4 == "STEP" || floorTexName == "CEIL3_5" || floorTexName == "CEIL3_6" || floorTexName == "CEIL1_2" ) {
			w2secdata.w2type = W2ST_MetalSurface;

		} else if ( floorTexName == "FLOOR4_6" ) {
			w2secdata.w2type = W2ST_PlasticSurface;

		} else if ( floorTexNameLeft4 == "FLAT" ) {
			String postfix = floorTexName.Mid( 4, 3 );

			if ( postfix == "20" || postfix == "22" || postfix == "23" || postfix == "3" || postfix == "4" )
				w2secdata.w2type = W2ST_MetalSurface;
			else if ( postfix == "1" || postfix == "17" || postfix == "18" || postfix == "19" || postfix == "2" || postfix == "9" )
				w2secdata.w2type = W2ST_PlasticSurface;
			else if ( postfix == "10" || postfix == "14" || postfix == "5_5" || postfix == "8" )
				w2secdata.w2type = W2ST_SoftSurface;

		} else if ( floorTexNameLeft5 == "GRASS" ) {
			w2secdata.w2type = W2ST_SoftSurface;

		} else if ( floorTexNameLeft5 == "SLIME" || floorTexNameLeft5 == "RROCK" ) {
			int texSubindex = floorTexName.Mid( 5, 2 ).ToInt();

			if (     isSlime00Slime08
				|| ( floorTexNameLeft5 == "SLIME" && texSubindex >= 9 && texSubindex <= 12 )
				|| ( floorTexNameLeft5 == "RROCK" && texSubindex <= 8 && texSubindex != 3 && texSubindex != 4 ) ) {
				w2secdata.w2type = W2ST_Incandecent;

			} else if ( floorTexNameLeft5 == "RROCK" ) {
				w2secdata.w2type = W2ST_RockSurface;
			}

		} else if ( floorTexName == "GRNROCK" ) {
			w2secdata.w2type = W2ST_RockSurface;

		} else if ( floorTexNameLeft6 == "MFLR8_" ) {
			String postfix = floorTexName.Mid( 6, 1 );

			if ( postfix == "1" || postfix == "3" )
				w2secdata.w2type = W2ST_RockSurface;
			else
				w2secdata.w2type = W2ST_SoftSurface;

		} else if ( floorTexNameLeft4 == "SFLR" ) {
			w2secdata.w2type = W2ST_SoftSurface;

		} else if ( floorTexNameLeft4 == "LAVA" ) {
			w2secdata.w2type = W2ST_Incandecent;

		} else if ( floorTexNameLeft5 == "BLOOD" || floorTexNameLeft6 == "NUKAGE" ) {
			w2secdata.w2type = W2ST_Nukage;

		} else if ( floorTexNameLeft6 == "F_SKY1" ) {
			w2secdata.w2type = W2ST_None;

		}

		if ( W2Global.GetLoglevel() >= LL_Debug ) {
			String w2oldSectypeName = ( w2oldSectype != W2ST_None? W2SoundKeeper.WeathremumSectorTypeNames[ w2oldSectype ] : TEXTCOLOR_RED .. "<None>" .. LLCOLOR_DEBUG );
			String w2newSectypeName = ( w2secdata.w2type != W2ST_None? W2SoundKeeper.WeathremumSectorTypeNames[ w2secdata.w2type ] : TEXTCOLOR_RED .. "<None>" .. LLCOLOR_DEBUG );

			W2Global.ClearscopeLog( LL_Debug, GetClassName() .. "::UpdateW2SectorSurfaceType(). Updated sector #" .. sec.Index() .. " from \"" .. w2oldSectypeName .. "\" (" .. w2oldSectype .. ") to \"" .. w2newSectypeName .. "\" (" .. w2secdata.w2type .. ")." );
		}
	} // of void UpdateW2SectorSurfaceType( out W2SectorData w2secdata, Sector sec ) {}


	void CreateGeneralSectorsData( void ) {
		W2Global.Log( LL_Debug, GetClassName() .. "::CreateGeneralSectorsData(). Initialization..." );

		w2level.allSectorsData.Clear();
		w2level.corniceLinesFlags.Clear();

		// Save all of the level lines and sectors for the quick index-based
		//access. Filled up before any other operations because the next ones
		//may (and will) get any element, not only less than their "Index()".
		for ( int i = 0; i < level.lines.Size(); i++ )
			w2level.corniceLinesFlags.Push( 0 );

		for ( int i = 0; i < level.sectors.Size(); i++ )
			w2level.allSectorsData.Push( W2SectorData.Create( level.Sectors[ i ] ) );

		W2Global.Log( LL_Debug, GetClassName() .. "::CreateGeneralSectorsData(). " .. w2level.corniceLinesFlags.Size() .. " lines, " .. w2level.allSectorsData.Size() .. " sectors." );

		// Understand its data such as "w2type" and "groupnum" for sectors under sky:
		for ( int i = 0; i < level.sectors.Size(); i++ ) {
			//console.printf( "Sector " .. i .. ": " .. level.Sectors[ i ].GetTexture( Sector.ceiling ) .. "." );
			Sector s = level.Sectors[ i ];

			if ( s.GetTexture( Sector.CEILING ) == skyflatnum ) {
				W2SectorData secdataOutdoor = w2level.allSectorsData[ i ];

				// Setting relationship to neighbour sectors:
				secdataOutdoor.w2type = W2ST_NormalSurface;

				for ( int j = 0; j < s.Lines.Size(); j++ ) {
					Line l = s.Lines[ j ];
					Sector lsector = l.frontsector;

					if ( lsector && lsector != s )
						setNextToOutdoorSectorData( l, lsector );

					lsector = l.backsector;

					if ( lsector && lsector != s )
						setNextToOutdoorSectorData( l, lsector );
				}

				UpdateW2SectorSurfaceType( secdataOutdoor, s );

			} // of if ( s.GetTexture( Sector.ceiling ) == skyflatnum ) {}

		} // of for ( int i = 0; i < level.Sectors.Size(); i++ ) {}

		totalLevelSectors = level.sectors.Size();
		updateSectorCurIndex = 0;
		updateSectorsMaxTickAmount = int( ceil( totalLevelSectors / 10.0 ) );

		mustCreateGeneralSectorsData = false;
	} // of void CreateGeneralSectorsData( void ) {}


	private void pushSound( String sndname, String w2typename = "" ) {
		Actor plmo = players[ initCurW2PlayerHandler.FriendPlayer ].mo;
		initCurW2SurfaceType++;
		initCurW2PlayerHandler.sndkeepers.Push( W2SoundKeeper.Create( sndname, initCurW2SurfaceType, plmo, w2typename ) );

		W2Global.Log( LL_Detailed, String.Format( TEXTCOLOR_DARKGRAY .. "pushSound(). Player %i, " .. LLCOLOR_MAIN .. "w2type %2i \"%s\", sound \"%s\".",
									initCurW2PlayerHandler.FriendPlayer, initCurW2SurfaceType, initCurW2PlayerHandler.sndkeepers[ initCurW2SurfaceType ].w2typename, sndname ) );
	}

	override void PlayerEntered( PlayerEvent e ) {
		if ( mustCreateGeneralSectorsData )
			CreateGeneralSectorsData();

		if ( players[ e.PlayerNumber ].mo ) {
			Actor plmo = players[ e.PlayerNumber ].mo;

			initCurW2PlayerHandler = W2PlayerHandler( Actor.Spawn( "W2PlayerHandler", plmo.pos ) );
			initCurW2PlayerHandler.FriendPlayer = e.PlayerNumber;
			initCurW2PlayerHandler.w2level = w2level;
			initCurW2SurfaceType = W2ST_None;

			// Based on the both of SNDINFO and SNDSEQ.
			pushSound( "weather/wind(x)" );
			pushSound( "weathremum/rain/default" );             // W2ST_NormalSurface,  
			pushSound( "weathremum/rainsurface/soft" );         // W2ST_SoftSurface,	
			pushSound( "weathremum/rain/heavy" );               // W2ST_Water,			
			pushSound( "weathremum/rain/default" );             // W2ST_Nukage,		    
			pushSound( "weathremum/rainsurface/incandescent" ); // W2ST_Incandecent,	
			pushSound( "weathremum/rainsurface/rock" );         // W2ST_RockSurface,	
			pushSound( "weathremum/rainsurface/metal" );        // W2ST_MetalSurface,   
			pushSound( "weathremum/rainsurface/plasticglass" ); // W2ST_PlasticSurface, 

			playerHandlers[ e.PlayerNumber ] = initCurW2PlayerHandler;

			W2Global.Log( LL_Detailed, "Created handler " .. initCurW2PlayerHandler.GetClassName() .. " for player " .. e.PlayerNumber .. "." );


			W2SkyboxViewpoint sky = W2SkyboxViewpoint.Create( e.PlayerNumber );

			sky.CreateActor( "W2NightOceanSkybox", (0, 90.0, 16.0) );

			W2SkyboxFog skyfog = W2SkyboxFog( sky.CreateActor( "W2SkyboxFog", (0, 90.0, 16.0) ) );
			skyfog.SetType( skyfog.SFT_Dark, 0.5 );

			for ( int i = 0; i < 1024; i++ )
				sky.CreateActor( "W2SkyboxSmallStar", (FRandom( 0.0, 360.0 ), FRandom( 10.0, 90.0 ), 512.0) );
		}
		
		Super.PlayerEntered( e );

		/*if ( e.PlayerNumber == consoleplayer && gl_texture_format == "5" ) {
			console.printf( TEXTCOLOR_DARKGRAY .. GetClassName() .. "::PlayerEntered(). " .. TEXTCOLOR_YELLOW
							.. "Your OpenGL texture format seems to be set to \"" .. TEXTCOLOR_CYAN .. "S3TC_DXT3" .. TEXTCOLOR_YELLOW .."\", so translucent raindrops might look weird. " .. TEXTCOLOR_GRAY
							.. "Change it in the \"Display options\"->\"OpenGL renderer\"->\"Texture options\" or alter the \"gl_texture_format\" variable." );
		}*/
	}


	int debugTraceLineIndex;

	override void WorldTick() {
		if ( w2level.allSectorsData.Size() != totalLevelSectors ) {
			W2Global.Log( LL_Debug, GetClassName() .. "::WorldLoaded(). False sectors size: now " .. w2level.allSectorsData.Size() .. ", saved " .. totalLevelSectors .. ", really " .. level.sectors.Size() .. ". Recreating Weathremum level data..." );
			CreateGeneralSectorsData();
		}

		if ( players[ consoleplayer ].mo != players[ consoleplayer ].Camera ) {
			vector3 camerapos = players[ consoleplayer ].Camera.pos;
			SendNetworkEvent( "mcm_weathremum_SetCameraXYZ", int( camerapos.x ), int( camerapos.y ), int( camerapos.z ) );

		} else if ( playerHandlers[ consoleplayer ].useMultiplayerPos ) {
			SendNetworkEvent( "mcm_weathremum_CancelCameraXYZ" );

		}

		if ( W2Global.GetLoglevel() >= LL_Debug ) {
	        FLineTraceData ptrace;
			PlayerPawn pl = players[ 0 ].mo;

			pl.LineTrace( pl.angle, 256, pl.pitch, data: ptrace );
			debugTraceLineIndex = ( ptrace.hitLine? ptrace.hitLine.Index() : -1 );
		}

		for ( int i = 0; i < updateSectorsMaxTickAmount; i++ ) {
			Sector s = level.sectors[ updateSectorCurIndex ];

			if ( s.GetTexture( Sector.CEILING ) == skyflatnum ) {
				W2SectorData secdata = w2level.allSectorsData[ updateSectorCurIndex ];

				if ( secdata.lastFloorTexture != s.GetTexture( Sector.FLOOR ) )
					UpdateW2SectorSurfaceType( secdata, s );
			}

			updateSectorCurIndex = ( updateSectorCurIndex + 1 ) % totalLevelSectors;
		}

		Super.WorldTick();
	}

	override void NetworkProcess( ConsoleEvent e ) {
		if ( !e.IsManual && multiplayer ) {
			if ( e.Name == "mcm_weathremum_SetCameraXYZ" ) {
				playerHandlers[ e.Player ].useMultiplayerPos = true;
				playerHandlers[ e.Player ].multiplayerPos = ( e.args[ 0 ], e.args[ 1 ], e.args[ 2 ] );
			} else if ( e.Name == "mcm_weathremum_CancelCameraXYZ" ) {
				playerHandlers[ e.Player ].useMultiplayerPos = false;
			}
		}

		/*if ( e.Name ~== "test_turn180" ) {
			players[ e.Player ].mo.angle = ( players[ e.Player ].mo.angle + 180.0 ) % 360.0;
		} else if ( e.Name ~== "test_turnto" ) {
			players[ e.Player ].mo.angle = e.args[ 0 ] % 360.0;
		}*/

		Super.NetworkProcess( e );
	}


	/*override void RenderOverlay( RenderEvent e ) {
		W2PlayerHandler playerhandler = playerHandlers[ consoleplayer ];

		if ( !playerhandler ) {
			Super.RenderOverlay( e );
			return;
		}

		W2SectorData secdata = ( playerhandler.floorsector? w2level.allSectorsData[ playerhandler.floorsector.Index() ] : NULL );

		String outStr = "Total sounds: " .. playerhandler.sndkeepers.Size() .. ".\n";

		for ( int i = 0; i < playerhandler.sndkeepers.Size(); i++ ) {
			W2SoundKeeper curkeeper = playerhandler.sndkeepers[ i ];

			String debugstr = "";
			String debugstr2 = curkeeper.w2typename;// .. "; " .. curkeeper.sndname;

			switch ( curkeeper.status ) {
				case W2HS_Active: debugstr = TEXTCOLOR_GREEN .. "on"; break;
				case W2HS_StopSuggestion: debugstr = TEXTCOLOR_YELLOW .. "stopping"; break;
				case W2HS_Off: debugstr = TEXTCOLOR_RED .. "off"; break;
				default: debugstr = TEXTCOLOR_FIRE .. "unknown"; break;
			}

			String maincolor = ( secdata && secdata.w2type == i? TEXTCOLOR_DARKGREEN : TEXTCOLOR_GRAY );

			//debugstr2.Replace( "weathremum", TEXTCOLOR_BLUE .. "[w2]" .. maincolor );
			outStr.AppendFormat( "%s#%i (%s%s, type %i%s, \"%s%s\").\n" .. TEXTCOLOR_GRAY,
									maincolor, i, debugstr, maincolor, curkeeper.w2type, maincolor, debugstr2, maincolor );

			debugstr = "      Left: ";

			for ( int dir = 0; dir < W2SD_Quantity; dir++ ) {
				if ( curkeeper.sndorigin[ dir ] )
					outStr.AppendFormat( debugstr .. TEXTCOLOR_TEAL .. "dist " .. curkeeper.minlength[ dir ] .. " at " .. curkeeper.minposxyz[ dir ].xy .. TEXTCOLOR_GRAY .. ". ZDiff " .. curkeeper.minposxyz[ dir ].z );
				else
					outStr = outStr .. debugstr .. TEXTCOLOR_DARKGRAY .. "off (" .. curkeeper.minlength[ dir ] .. ")";

				debugstr = TEXTCOLOR_GRAY .. "\n     Right: ";
			} // of for ( int dir = 0; dir < W2SD_Quantity; dir++ ) {}

			outStr = outStr .. "\n\n";
		}

		Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 30, 60, outStr,
						DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		if ( secdata )
			Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 1100, 100, "Current sector: " .. secdata.s.Index(),
							DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		if ( debugTraceLineIndex != -1 )
			Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 1100, 120, "Line ID: " .. debugTraceLineIndex,
							DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		Super.RenderOverlay( e );
	}/* */

} // of class WeathremumHandler: EventHandler {}
