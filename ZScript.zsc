version "2.4.0"

#include "ZScript/W2Data.zsc"
#include "ZScript/W2PlayerHandler.zsc"
#include "ZScript/W2AmbientActors.zsc"

const mcm_WeathremumVersion = "0.1";


class mcm_WeathremumHandler: EventHandler {
	bool mustCreateGeneralSectorsData;

	Array<W2SectorData> generalSectorsData;	// Just a copyable structure.
	Array<int> corniceLinesFlags;			// For the raindrops effect from a canopy.
	W2PlayerHandler firstplayerhandler;		// Temporary debug thing...

	override void OnRegister() {
		SetOrder( WeathremumHandlerOrder );
		mustCreateGeneralSectorsData = true;
		Super.OnRegister();
	}

	void CreateGeneralSectorsData( void ) {

		// Save all of the level sectors, mostly for the quick index-based access:
		for ( int i = 0; i < level.lines.Size(); i++ )
			corniceLinesFlags.Push( 0 );

		for ( int i = 0; i < level.sectors.Size(); i++ )
			generalSectorsData.Push( W2SectorData.Create( level.sectors[ i ] ) );

		for ( int i = 0; i < level.Sectors.Size(); i++ ) {
			//console.printf( "Sector " .. i .. ": " .. level.Sectors[ i ].GetTexture( Sector.ceiling ) .. "." );
			Sector s = level.Sectors[ i ];

			if ( s.GetTexture( Sector.ceiling ) == skyflatnum ) {
				generalSectorsData[ i ].sectype = W2ST_Outdoor;

				for ( int j = 0; j < s.Lines.Size(); j++ ) {
					Line l = s.Lines[ j ];
					Sector ls = l.frontsector;

					if ( ls && ls != s && ls.GetTexture( Sector.ceiling ) != skyflatnum ) {
						generalSectorsData[ ls.Index() ].sectype = W2ST_NextToOutdoor;
						corniceLinesFlags[ l.Index() ] = 1;
					}

					ls = s.Lines[ j ].backsector;

					if ( ls && ls != s && ls.GetTexture( Sector.ceiling ) != skyflatnum ) {
						generalSectorsData[ ls.Index() ].sectype = W2ST_NextToOutdoor;
						corniceLinesFlags[ l.Index() ] = 1;
					}
				}
			} // of if ( s.GetTexture( Sector.ceiling ) == skyflatnum ) {}

		} // of for ( int i = 0; i < level.Sectors.Size(); i++ ) {}

		mustCreateGeneralSectorsData = false;
	} // of override void WorldLoaded( WorldEvent e ) {}

	override void PlayerEntered( PlayerEvent e ) {
		if ( mustCreateGeneralSectorsData )
			CreateGeneralSectorsData();

		if ( players[ e.PlayerNumber ].mo ) {
			W2PlayerHandler playerhandler = W2PlayerHandler( Actor.Spawn( "W2PlayerHandler", players[ e.PlayerNumber ].mo.pos ) );
			playerhandler.FriendPlayer = e.PlayerNumber;
			playerhandler.sectorsdata.Copy( generalSectorsData );
			playerhandler.w2handler = self;

			if ( e.PlayerNumber == 0 )
				firstplayerhandler = playerhandler;

			console.printf( "Added a " .. playerhandler.GetClassName() .. " for player " .. e.PlayerNumber .. "." );
		}
		
		Super.PlayerEntered( e );

		if ( e.PlayerNumber == consoleplayer && gl_texture_format == "5" ) {
			console.printf( TEXTCOLOR_DARKGRAY .. GetClassName() .. "::PlayerEntered(). " .. TEXTCOLOR_YELLOW
							.. "Your OpenGL texture format seems to be set to \"" .. TEXTCOLOR_CYAN .. "S3TC_DXT3" .. TEXTCOLOR_YELLOW .."\", so translucent raindrops might look weird. " .. TEXTCOLOR_GRAY
							.. "Change it in the \"Display options\"->\"OpenGL Renderer\"->\"Texture options\" or alter the \"gl_texture_format\" variable." );
		}
	}

	/*override void RenderOverlay( RenderEvent e ) {
		if ( !firstplayerhandler ) {
			Super.RenderOverlay( e );
			return;
		}

		String outStr = "Total active sectors: " .. firstplayerhandler.loopdataindices.Size() .. ".\n";

		for ( int i = 0; i < firstplayerhandler.sectorsdata.Size(); i++ ) {
			W2SectorData cursecdata = firstplayerhandler.sectorsdata[ i ];

			outStr = outStr .. TEXTCOLOR_GRAY .. "#" .. i .. " (type " .. cursecdata.sectype .. "): ";

			switch ( cursecdata.status ) {
				case W2HS_Off:
					outStr = outStr .. TEXTCOLOR_DARKGRAY .. "off\n";
					break;
				case W2HS_Loop:
					outStr = outStr .. TEXTCOLOR_GREEN .. "on. " .. TEXTCOLOR_DARKGREEN .. "Lines ";

					for ( int j = 0; j < cursecdata.lines.Size(); j++ )
						outStr = outStr .. cursecdata.lineindices[ j ] .. " ";

					outStr = outStr .. "\n";
					break;
				case W2HS_StopSuggestion:
					outStr = outStr .. TEXTCOLOR_RED .. "stopping\n";
					break;
				default:
					outStr = outStr .. TEXTCOLOR_FIRE .. "<UNKNOWN>\n";
					console.printf( GetClassName() .. "::RenderOverlay(). " .. TEXTCOLOR_FIRE .. "Unknown data for sector " .. i .. "." );
					break;
			}
		}

		Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 30, 60, outStr,
						DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 1100, 60, "Current sector: " .. ( firstplayerhandler.floorsector? firstplayerhandler.floorsector.sectornum .. "" : "NULL" ),
						DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		Super.RenderOverlay( e );
	}*/

} // of class mcm_WeathremumHandler: EventHandler {}

