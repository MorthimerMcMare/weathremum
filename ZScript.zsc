version "3.3.0"

#include "ZScript/W2Data.zsc"
#include "ZScript/W2PlayerHandler.zsc"
#include "ZScript/W2AmbientActors.zsc"

const mcm_WeathremumVersion = "0.19";


class mcm_WeathremumHandler: EventHandler {
	bool mustCreateGeneralSectorsData;		// "PlayerEntered()" is called before "WorldLoaded()".

	W2LevelGeneralData w2level;
	W2PlayerHandler playerHandlers[ MAXPLAYERS ];

	override void OnRegister() {
		SetOrder( WeathremumHandlerOrder );

		mustCreateGeneralSectorsData = true;
		w2level = new( 'W2LevelGeneralData' );

		Super.OnRegister();
	}


	private void setNextToOutdoorSectorData( Line curline, Sector ls ) {
		W2SectorData closeSectorData = w2level.allSectorsData[ ls.Index() ];

		if ( ls.GetTexture( Sector.ceiling ) != skyflatnum ) {
			closeSectorData.w2type = W2ST_NextToOutdoor;
			w2level.corniceLinesFlags[ curline.Index() ] = 1;
		}
	}

	void CreateGeneralSectorsData( void ) {
		w2level.allSectorsData.Clear();
		w2level.corniceLinesFlags.Clear();

		// Save all of the level lines and sectors for the quick index-based
		//access. Filled up before any other operations because the next ones
		//may (and will) get any element, not only less than their "Index()".
		for ( int i = 0; i < level.lines.Size(); i++ )
			w2level.corniceLinesFlags.Push( 0 );

		for ( int i = 0; i < level.sectors.Size(); i++ )
			w2level.allSectorsData.Push( W2SectorData.Create( level.Sectors[ i ] ) );

		// Understand its data such as "w2type" and "groupnum" for sectors under sky:
		for ( int i = 0; i < level.sectors.Size(); i++ ) {
			//console.printf( "Sector " .. i .. ": " .. level.Sectors[ i ].GetTexture( Sector.ceiling ) .. "." );
			Sector s = level.Sectors[ i ];

			if ( s.GetTexture( Sector.ceiling ) == skyflatnum ) {
				W2SectorData curOutdoorSectorData = w2level.allSectorsData[ i ];

				// Setting relationship to neighbour sectors:
				curOutdoorSectorData.w2type = W2ST_NormalSurface;

				for ( int j = 0; j < s.Lines.Size(); j++ ) {
					Line l = s.Lines[ j ];
					Sector lsector = l.frontsector;

					if ( lsector && lsector != s )
						setNextToOutdoorSectorData( l, lsector );

					lsector = l.backsector;

					if ( lsector && lsector != s )
						setNextToOutdoorSectorData( l, lsector );
				}

				// Understanding the sector floor terrain Weathremum type:
				String floorTexName = TexMan.GetName( s.GetTexture( s.FLOOR ) );
				String floorTexNameLeft4 = floorTexName.Left( 4 );
				String floorTexNameLeft5 = floorTexName.Left( 5 );
				String floorTexNameLeft6 = floorTexName.Left( 6 );

				bool isSlime00Slime08 = ( floorTexNameLeft6 == "SLIME0" && floorTexName.CharCodeAt( 6 ) <= 0x38 );

				if ( floorTexNameLeft6 == "FWATER" || ( isSlime00Slime08 && s.damageamount ) ) {
					curOutdoorSectorData.w2type = W2ST_Water;

				} else if ( floorTexNameLeft5 == "SLIME" || floorTexNameLeft5 == "RROCK" ) {
					int texSubindex = floorTexName.Mid( 5, 2 ).ToInt();

					if (     isSlime00Slime08
						|| ( floorTexNameLeft5 == "SLIME" && texSubindex >= 9 && texSubindex <= 12 )
						|| ( floorTexNameLeft5 == "RROCK" && texSubindex <= 8 && texSubindex != 3 && texSubindex != 4 ) ) {
						curOutdoorSectorData.w2type = W2ST_Incandecent;

					} else if ( floorTexNameLeft5 == "RROCK" ) {
						curOutdoorSectorData.w2type = W2ST_RockSurface;
					}

				} else if ( floorTexNameLeft5 == "METAL" ) {
					curOutdoorSectorData.w2type = W2ST_MetalSurface;

				} else if ( floorTexNameLeft5 == "FLOOR" ) {
					String postfix = floorTexName.Mid( 5, 3 );

					if ( postfix == "0_5" || postfix == "0_6" || postfix == "0_7" || postfix == "3_3" || postfix == "4_8" || postfix == "5_1" )
						curOutdoorSectorData.w2type = W2ST_MetalSurface;

				} else if ( floorTexName == "GATE4" || floorTexName == "SLIME14" || floorTexName == "SLIME15" || floorTexName == "SLIME16" || floorTexNameLeft4 == "STEP" || floorTexName == "CEIL3_5" || floorTexName == "CEIL3_6" || floorTexName == "CEIL1_2" ) {
					curOutdoorSectorData.w2type = W2ST_MetalSurface;

				} else if ( floorTexName == "FLOOR4_6" ) {
					curOutdoorSectorData.w2type = W2ST_PlasticSurface;

				} else if ( floorTexNameLeft4 == "FLAT" ) {
					String postfix = floorTexName.Mid( 4, 3 );

					if ( postfix == "20" || postfix == "22" || postfix == "23" || postfix == "3" || postfix == "4" )
						curOutdoorSectorData.w2type = W2ST_MetalSurface;
					else if ( postfix == "1" || postfix == "17" || postfix == "18" || postfix == "19" || postfix == "2" || postfix == "9" )
						curOutdoorSectorData.w2type = W2ST_PlasticSurface;

				} else if ( floorTexNameLeft4 == "LAVA" ) {
					curOutdoorSectorData.w2type = W2ST_Incandecent;

				} else if ( floorTexNameLeft5 == "BLOOD" || floorTexNameLeft6 == "NUKAGE" ) {
					curOutdoorSectorData.w2type = W2ST_Nukage;

				}
			} // of if ( s.GetTexture( Sector.ceiling ) == skyflatnum ) {}

		} // of for ( int i = 0; i < level.Sectors.Size(); i++ ) {}

		mustCreateGeneralSectorsData = false;
	} // of override void WorldLoaded( WorldEvent e ) {}


	W2PlayerHandler curW2PlayerHandler;
	int curW2SurfaceType;

	private void pushSound( String sndname ) {
		Actor plmo = players[ curW2PlayerHandler.FriendPlayer ].mo;
		curW2SurfaceType++;
		curW2PlayerHandler.sndkeepers.Push( W2SoundKeeper.Create( sndname, curW2SurfaceType, plmo ) );
	}

	override void PlayerEntered( PlayerEvent e ) {
		if ( mustCreateGeneralSectorsData )
			CreateGeneralSectorsData();

		if ( players[ e.PlayerNumber ].mo ) {
			Actor plmo = players[ e.PlayerNumber ].mo;

			curW2PlayerHandler = W2PlayerHandler( Actor.Spawn( "W2PlayerHandler", plmo.pos ) );
			curW2PlayerHandler.FriendPlayer = e.PlayerNumber;
			curW2PlayerHandler.w2level = w2level;
			curW2SurfaceType = W2ST_None;

			pushSound( "weather/wind(x)" );
			pushSound( "weathremum/rain/default" );          // W2ST_NormalSurface, 
			pushSound( "weathremum/rain/default" );          // W2ST_SoftSurface,	
			pushSound( "weathremum/rain/heavy" );            // W2ST_Water,			
			pushSound( "weathremum/rain/default" );          // W2ST_Nukage,		
			pushSound( "weathremum/rain/default" );          // W2ST_Incandecent,	
			pushSound( "weathremum/rainsurface/rock" );      // W2ST_RockSurface,	
			pushSound( "weathremum/rainsurface/metal" );     // W2ST_Metal,         
			pushSound( "weathremum/rainsurface/plasticglass" );   // W2ST_Plastic,       

			playerHandlers[ e.PlayerNumber ] = curW2PlayerHandler;

			console.printf( "Added a " .. curW2PlayerHandler.GetClassName() .. " for player " .. e.PlayerNumber .. "." );
		}
		
		Super.PlayerEntered( e );

		/*if ( e.PlayerNumber == consoleplayer && gl_texture_format == "5" ) {
			console.printf( TEXTCOLOR_DARKGRAY .. GetClassName() .. "::PlayerEntered(). " .. TEXTCOLOR_YELLOW
							.. "Your OpenGL texture format seems to be set to \"" .. TEXTCOLOR_CYAN .. "S3TC_DXT3" .. TEXTCOLOR_YELLOW .."\", so translucent raindrops might look weird. " .. TEXTCOLOR_GRAY
							.. "Change it in the \"Display options\"->\"OpenGL renderer\"->\"Texture options\" or alter the \"gl_texture_format\" variable." );
		}*/
	}

	int debugTraceLineIndex;

	override void WorldTick() {
		if ( players[ consoleplayer ].mo != players[ consoleplayer ].Camera ) {
			vector3 camerapos = players[ consoleplayer ].Camera.pos;
			SendNetworkEvent( "mcm_weathremum_SetCameraXYZ", int( camerapos.x ), int( camerapos.y ), int( camerapos.z ) );

		} else if ( playerHandlers[ consoleplayer ].useMultiplayerPos ) {
			SendNetworkEvent( "mcm_weathremum_CancelCameraXYZ" );

		}

        FLineTraceData ptrace;
		PlayerPawn pl = players[ 0 ].mo;

		pl.LineTrace( pl.angle, 256, pl.pitch, data: ptrace );
		debugTraceLineIndex = ( ptrace.hitLine? ptrace.hitLine.Index() : -1 );

		Super.WorldTick();
	}

	override void NetworkProcess( ConsoleEvent e ) {
		if ( !e.IsManual && multiplayer ) {
			if ( e.Name == "mcm_weathremum_SetCameraXYZ" ) {
				playerHandlers[ e.Player ].useMultiplayerPos = true;
				playerHandlers[ e.Player ].multiplayerPos = ( e.args[ 0 ], e.args[ 1 ], e.args[ 2 ] );
			} else if ( e.Name == "mcm_weathremum_CancelCameraXYZ" ) {
				playerHandlers[ e.Player ].useMultiplayerPos = false;
			}
		}

		/*if ( e.Name ~== "test_turn180" ) {
			players[ e.Player ].mo.angle = ( players[ e.Player ].mo.angle + 180.0 ) % 360.0;
		} else if ( e.Name ~== "test_turnto" ) {
			players[ e.Player ].mo.angle = e.args[ 0 ] % 360.0;
		}*/

		Super.NetworkProcess( e );
	}


	override void RenderOverlay( RenderEvent e ) {
		W2PlayerHandler playerhandler = playerHandlers[ consoleplayer ];

		if ( !playerhandler ) {
			Super.RenderOverlay( e );
			return;
		}

		W2SectorData secdata = ( playerhandler.floorsector? w2level.allSectorsData[ playerhandler.floorsector.Index() ] : NULL );

		String outStr = "Total sounds: " .. playerhandler.sndkeepers.Size() .. ".\n";

		for ( int i = 0; i < playerhandler.sndkeepers.Size(); i++ ) {
			W2SoundKeeper curkeeper = playerhandler.sndkeepers[ i ];

			/*if ( curkeeper.w2type == W2ST_None ) {
				outStr.AppendFormat( TEXTCOLOR_GRAY .. "#%i (g" .. TEXTCOLOR_DARKGRAY .. "%3i" .. TEXTCOLOR_GRAY .. "): ",
									i, curkeeper.groupnum, curkeeper.w2type );
			} else {
				outStr.AppendFormat( TEXTCOLOR_GRAY .. "#%i (g" .. TEXTCOLOR_TEAL .. "%3i" .. TEXTCOLOR_GRAY .. ", t%i): ",
									i, cursecdata.groupnum, cursecdata.w2type );
			}*/

			String debugstr = "";
			String debugstr2 = curkeeper.sndname;

			switch ( curkeeper.status ) {
				case W2HS_Active: debugstr = TEXTCOLOR_GREEN .. "on" .. TEXTCOLOR_GRAY; break;
				case W2HS_StopSuggestion: debugstr = TEXTCOLOR_YELLOW .. "stopping" .. TEXTCOLOR_GRAY; break;
				case W2HS_Off: default: debugstr = TEXTCOLOR_RED .. "off" .. TEXTCOLOR_GRAY; break;
			}

			String maincolor = ( secdata && secdata.w2type == i? TEXTCOLOR_DARKGREEN : TEXTCOLOR_GRAY );

			debugstr2.Replace( "weathremum", TEXTCOLOR_BLUE .. "[w2]" .. maincolor );
			outStr.AppendFormat( "%s#%i (stat %s%s, type %i%s, \"%s%s\").\n" .. TEXTCOLOR_GRAY,
									maincolor, i, debugstr, maincolor, curkeeper.w2type, maincolor, debugstr2, maincolor );

			debugstr = "      Left: ";

			for ( int dir = 0; dir < W2SD_Quantity; dir++ ) {
				if ( curkeeper.sndorigin[ dir ] ) {
					if ( curkeeper.minlength[ dir ] < 9000.0 )
						outStr.AppendFormat( debugstr .. TEXTCOLOR_TEAL .. "dist " .. curkeeper.minlength[ dir ] .. " at " .. curkeeper.minposxy[ dir ] );
					else
						outStr = outStr .. debugstr .. TEXTCOLOR_DARKGRAY .. "off (" .. curkeeper.minlength[ dir ] .. ")";
				} else {
					outStr = outStr .. TEXTCOLOR_DARKRED .. "absent." .. TEXTCOLOR_GRAY;
				}

				debugstr = TEXTCOLOR_GRAY .. "\n     Right: ";
			} // of for ( int dir = 0; dir < W2SD_Quantity; dir++ ) {}

			outStr = outStr .. "\n\n";
		}

		Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 30, 60, outStr,
						DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		if ( secdata )
			Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 1100, 100, "Current sector: " .. secdata.s.Index(),
							DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		if ( debugTraceLineIndex != -1 )
			Screen.DrawText( Font.FindFont( "smallfont" ), Font.CR_GRAY, 1100, 120, "Line ID: " .. debugTraceLineIndex,
							DTA_KeepRatio, true, DTA_VirtualWidth, 1366, DTA_VirtualHeight, 768 );

		Super.RenderOverlay( e );
	}/* */


} // of class mcm_WeathremumHandler: EventHandler {}
