// Weathremum handler for each player.
// [McM]: Inherited from Thinker for the "profilethinkers" CCMD.

class W2PlayerHandler: Thinker {
	W2LevelGeneralData w2level;

	Array<W2SoundKeeper> sndkeepers;

	// "Actor.Spawn()" violates "BlockLinesIterator" work because of interference to the "validcount" variable.
	Array<Line> corniceLines;			// Lines between outdoor and indoor areas.
	Array<Line> cliffLines;

	vector3 pos;
	int targetPlayerNum;
	Actor master; // Player.
	Actor target; // An actor to follow (player or his camera).

	transient CVar raindropsAlphaMulCVar;

	void DoCVarsHandling( void ) {
		if ( !raindropsAlphaMulCVar )
			raindropsAlphaMulCVar = CVar.GetCVar( "mcm_weathremum_rainalphamul", players[ targetPlayerNum ] );

		w2level.raindropsAlphaMul = raindropsAlphaMulCVar.GetFloat();
	}

	void DoSectorEffects( void ) {
		corniceLines.Clear();
		cliffLines.Clear();

		// Picking up and applying a current player sector sound type:
		EWeathremumAreaType aCursector = W2ST_None;

		if ( target.cursector ) {
			W2SectorData secdata = w2level.GetSectorData( target.cursector );
			aCursector = secdata.w2area;

			if ( aCursector == W2AT_Outdoors ) {
				double floorz = target.cursector.floorplane.d * target.cursector.floorplane.negiC;
				vector3 newpos = ( target.Vec2Angle( 32.0, target.angle + 90.0 ), floorz );

				EWeathremumSectorType tCursector = secdata.w2type;

				sndkeepers[ tCursector ].SuggestPos3( newpos, W2SD_Left );
				sndkeepers[ tCursector ].SuggestPos3( newpos, W2SD_Right );
			}
		}


		// Searching for all types of the defined surfaces around player:

		// Second argument is an environment test radius.
		BlockLinesIterator it = BlockLinesIterator.Create( target, 768 );

		while ( it.Next() ) {
			Line l = it.curline;

			Sector frontsec = l.frontsector;
			Sector backsec = l.backsector;

			//int a = 0.123456; // Last part of the next line is for debug:
			if ( !frontsec /*|| ( l.frontsector.Index() != 11 )*/ )
				continue;

			W2SectorData frontsecdata = NULL;
			W2SectorData backsecdata = NULL;
			EWeathremumSectorType tfront = W2ST_None;
			EWeathremumSectorType tback = W2ST_None;
			EWeathremumAreaType afront = W2AT_None;
			EWeathremumAreaType aback = W2AT_None;

			W2LinedefData ldata = w2level.GetLinedefData( l );

			if ( frontsec ) {
				frontsecdata = w2level.GetSectorData( frontsec );
				tfront = frontsecdata.w2type;
				afront = frontsecdata.w2area;
			}
			if ( backsec ) {
				backsecdata = w2level.GetSectorData( backsec );
				tback = backsecdata.w2type;
				aback = backsecdata.w2area;
			}

			// Try to find a minimal length for the current sound:
			if ( afront == W2AT_Outdoors && frontsecdata.GetHeight() > 2.0 /*&& tfront != tCursector*/ )
				sndkeepers[ tfront ].SuggestLine( ldata, frontsec );

			if ( aback == W2AT_Outdoors && tback != tfront && backsecdata.GetHeight() > 2.0 /*&& tback != tCursector*/ )
				sndkeepers[ tback ].SuggestLine( ldata, backsec );


			// Cliffs and cornices rain effect:
			ldata.UpdateSectorPlanesZ();

			if ( ldata.IsSectorsSpacesJointed() ) {
				double cliffdelta = ldata.floorsdiffz;
				bool isCliff = false;

				if ( ldata.isCornice ) {
					corniceLines.Push( l );

					// Treat line as a cliff if it is enough high (relative to 
					//the player's camera) and if its sectors has proper height.
					if ( min( ldata.fceilz, ldata.bceilz ) > pos.z - 256.0
						 && (  ( cliffdelta > 16.0 && afront >= W2AT_Cornice && ldata.fceilz - ldata.ffloorz > 32.0 )
							|| ( cliffdelta < -16.0 && aback >= W2AT_Cornice && ldata.bceilz - ldata.bfloorz > 32.0 )
						) )
						isCliff = true;

				} else if ( afront >= W2AT_Cornice && aback >= W2AT_Cornice && W2AT_Cornice != ( afront & aback & W2AT_Cornice ) && abs( cliffdelta ) > 16.0 ) {
					isCliff = true;
				}

				if ( isCliff ) {
					ldata.cliffDir = ( cliffdelta > 0.0? ldata.frontdir : -ldata.frontdir );

					// Optimizing out non-visible cliffs:
					vector2 plp = target.pos.xy;
					vector2 deltaPlayerMidpoint = ( plp - ldata.midpoint );

					if ( ldata.cliffDir dot ( deltaPlayerMidpoint / deltaPlayerMidpoint.Length() ) >= -0.1 || ( plp - ldata.closestXYPointToPlayer ).Length() < 64.0 )
						cliffLines.Push( l );
				}
			} // of if ( ldata.IsSectorsSpacesJointed() ) {}
		} // of while ( it.Next() ) {}

	} // of void DoSectorEffects( void ) {}


	void DoRainEffects( void ) {
		// For the cumulative distribution function "sqrt()" addition 
		//thanks to https://habr.com/ru/post/583838/.

		// Outdoor areas raindrop effect:
		for ( int i = 0; i < 250; i++ ) {
			double angletheta = FRandom( 0.0, 360.0 );
			vector2 raindropPos = pos.xy + ( cos( angletheta ), sin( angletheta ) ) * ( 8.0 + sqrt( FRandom( 0.0, 1.0 ) ) * 764.0 );

			Sector raindropSector = Sector.PointInSector( raindropPos );

			if ( raindropSector && raindropSector.GetTexture( Sector.CEILING ) == skyflatnum ) {
				W2SectorData secdata = w2level.GetSectorData( raindropSector );

				if ( secdata.GetHeight() > 8.0 ) {
					Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_Raindrop", ( raindropPos, pos.z ) ) );

					raindrop.master = raindrop.target = target;
					raindrop.w2level = w2level;
				}
			} // of if ( raindropSector && raindropSector.GetTexture( Sector.CEILING ) == skyflatnum ) {}
		}

		vector2 windDir = ( w2level.globalWindVector + 3.0 * w2level.blowWindVector );
		windDir /= windDir.Length();

		// Cornice raindrops effect:
		for ( int i = 0; i < corniceLines.Size(); i++ ) {
			Line l = corniceLines[ i ];
			W2LinedefData ldata = w2level.GetLinedefData( l );

			double minspawnheight = min( ldata.fceilz, ldata.bceilz );

			// Cornice raindrops amount relates to the linedef length and to 
			//the global wind direction.

			// Scalar product here will be in range [-1.0; 1.0].
			double windProjection = ldata.corniceDir dot windDir;

			if ( windProjection > -0.4 ) {
				double spawnCoef = 156.2 * W2GlobalMath.Power( windProjection + 0.5, -1.2 );

				double spawnChange = ldata.linelen / spawnCoef;
				int spawnAmount = int( floor( spawnChange ) );

				if ( spawnChange - spawnAmount > 0.5 )
					spawnAmount++;

				for ( int i = 0; i < spawnAmount; i++ ) {
					Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_CanopyRaindrop", ( l.v1.p + ldata.deltadir * FRandom( 0.0, ldata.linelen ), minspawnheight ) ) );

					raindrop.vel.xy = ldata.corniceDir * FRandom( 0.0, ( windProjection + 0.3 ) * 3.0 ); // Yes, "windProjection" may be less than zero.
					raindrop.master = raindrop.target = target;
					raindrop.w2level = w2level;
				}
			}
		} // of for ( int i = 0; i < corniceLines.Size(); i++ ) {}

		// Raindrops from cliffs:
		for ( int i = 0; i < cliffLines.Size(); i++ ) {
			Line l = cliffLines[ i ];
			W2LinedefData ldata = w2level.GetLinedefData( l );

			double maxspawnheight = max( ldata.ffloorz, ldata.bfloorz ) - 3.0;

			// Cliff raindrops amount relates to the linedef length and to the 
			//global wind direction.

			// Scalar product here will be in range [-1.0; 1.0].
			double windProjection = ldata.cliffDir dot windDir;

			if ( ldata.isCornice ) {
				if ( windProjection > 0.0 )
					continue;

				windProjection = -0.5 * windProjection;
			}

			//double spawnCoef = 137.0 * W2GlobalMath.Power( windProjection + 1.05, -0.5 );
			double spawnCoef = 64.0 * ( 1 - windProjection ) + 76.0;

			double spawnChange = ldata.linelen / spawnCoef;
			int spawnAmount = int( floor( spawnChange ) );

			if ( spawnChange - spawnAmount > FRandom( 0.0, 2.0 ) )
				spawnAmount++;

			for ( int i = 0; i < spawnAmount; i++ ) {
				Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_CanopyRaindrop", ( l.v1.p + ldata.deltadir * FRandom( 0.0, ldata.linelen ) + ldata.cliffDir, maxspawnheight ) ) );

				raindrop.vel.xy = ldata.cliffDir * FRandom( 0.0, ( ( windProjection + 1.0 ) * 2.0 ) );
				raindrop.master = raindrop.target = target;
				raindrop.w2level = w2level;
			}
		} // of for ( int i = 0; i < cliffLines.Size(); i++ ) {}

		if ( w2level.sky ) {
			W2SkyboxViewpoint sky = w2level.sky;

			bool thetaWholeCircle = ( abs( target.pitch ) > 50.0 );
			double circleRadius = 100.0 + ( 96.0 * !thetaWholeCircle );

			for ( int i = 0; i < 80; i++ ) {
				double angletheta = ( thetaWholeCircle? FRandom( 0.0, 360.0 ) : target.angle + FRandom( -90.0, 90.0 ) );

				vector2 raindropPos = ( cos( angletheta ), sin( angletheta ) ) * ( 2.0 + FRandom( 0.0, 1.0 ) * circleRadius );

				Weathremum_SkyboxRaindrop raindrop = Weathremum_SkyboxRaindrop( sky.CreateActor( "Weathremum_SkyboxRaindrop", ( raindropPos, FRandom( 96.0, 130.0 ) ) ) );
				raindrop.w2level = w2level;
				raindrop.target = sky;
			}
		}
	} // of void DoRainEffects( void ) {}




	override void Tick() {
		PlayerInfo pl = players[ targetPlayerNum ];

		if ( !playeringame[ targetPlayerNum ] || !pl.mo || targetPlayerNum != consoleplayer )
			return;

		master = pl.mo;

		if ( !master ) {
			W2Global.Log( LL_Main, GetClassName() .. "::Tick(). Target player " .. targetPlayerNum .. " disappeared, destroying self." );
			Destroy();
			Super.Tick();
		}

		target = ( master.player.Camera? master.player.Camera : master );
		pos = target.pos;
		//console.printf( "W2PlH <" .. self .. "> pos: Cam " .. ( pl.Camera? pl.Camera .. " (\"" .. pl.Camera.GetClassName() .. "\")" : "NULL" ) .. ", pos " .. pos );


		DoCVarsHandling();

		// Sound keepers pre-tick handling:
		for ( int i = 0; i < sndkeepers.Size(); i++ )
			sndkeepers[ i ].PreTick();

		DoSectorEffects(); 	// Sector sounds (rain, winds);

		if ( !( level.frozen || globalfreeze ) )
			DoRainEffects(); 	// Rain itself, raindrops from cornices.

		// Sound keepers post-tick handling:
		for ( int i = 0; i < sndkeepers.Size(); i++ )
			sndkeepers[ i ].PostTick();

		//int a = 0.123456; // Next line is for debug (uncomment lines above):
		//sndkeepers[ W2ST_NormalSurface ].PostTick();
	} // of override void Tick() {}

} // of class W2PlayerHandler: Actor {}
