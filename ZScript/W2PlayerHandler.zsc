// Weathremum handler for each player.

class W2PlayerHandler: Actor {
	W2LevelGeneralData w2level;

	Array<W2SoundKeeper> sndkeepers;
	Array<Line> corniceLines;			// Lines between outdoor and indoor areas.
	WeathremumUnsyncRandom rnd;

	// "target" is an actor to follow (updates every "Tick()").

	Default {
		+NOINTERACTION; // Implies +NOGRAVITY and +NOBLOCKMAP.
		+DONTSPLASH;
		+NOTONAUTOMAP;
	}

	override void BeginPlay() {
		rnd = WeathremumUnsyncRandom.Create();

		if ( consoleplayer == 0 )
			for ( int i = 0; i < 10; i++ )
				console.printf( TEXTCOLOR_BRICK .. GetClassName() .. "::BeginPlay(). Player 0's rnd.Random( 1, 10 ) shift #%i: %i.", i, rnd.Random( 1, 10 ) );
	}


	void DoSectorEffects( void ) {
		corniceLines.Clear();

		EWeathremumSectorType tCursector = W2ST_None;

		if ( ceilingsector ) {
			tCursector = w2level.allSectorsData[ ceilingsector.Index() ].w2type;

			if ( tCursector != W2ST_None ) {
				vector3 newpos = ( pos.xy + (6.0, 0.0), floorz );

				sndkeepers[ tCursector ].SuggestPos3( newpos, W2SD_Left );
				sndkeepers[ tCursector ].SuggestPos3( newpos, W2SD_Right );
			}
		}


		// Second argument is an environment test radius.
		BlockLinesIterator it = BlockLinesIterator.Create( self, 768 );

		while ( it.Next() ) {
			Line l = it.curline;

			//int a = 0.123456; // Last part of the next line is for debug:
			if ( !l.frontsector /*|| ( l.frontsector.Index() != 11 )*/ )
				continue;

			EWeathremumSectorType tfront = ( l.frontsector? w2level.allSectorsData[ l.frontsector.Index() ].w2type : W2ST_None );
			EWeathremumSectorType tback = ( l.backsector? w2level.allSectorsData[ l.backsector.Index() ].w2type : W2ST_None );

			// Try to find a minimal length for the current sound:
			if ( tfront != W2ST_None /*&& tfront != tCursector*/ )
				sndkeepers[ tfront ].SuggestLine( l, l.frontsector );

			if ( tback != W2ST_None && tback != tfront /*&& tback != tCursector*/ )
				sndkeepers[ tback ].SuggestLine( l, l.backsector );

			// "Actor.Spawn()" violates "BlockLinesIterator" work because of interference to the "validcount" variable.
			if ( w2level.corniceLinesFlags[ l.Index() ] == 1 )
				corniceLines.Push( l );
		} // of while ( it.Next() ) {}

	} // of void DoSectorEffects( void ) {}


	void DoRainEffects( void ) {
		// For the cumulative distribution function "sqrt()" addition 
		//thanks to https://habr.com/ru/post/583838/.

		// Outdoor areas raindrop effect:
		for ( int i = 0; i < 250; i++ ) {
			double angletheta = rnd.FRandom( 0.0, 360.0 );

			vector2 raindropPos = pos.xy + ( cos( angletheta ), sin( angletheta ) ) * ( 8.0 + sqrt( rnd.FRandom( 0.0, 1.0 ) ) * 764.0 );

			Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_Raindrop", ( raindropPos, pos.z ) ) );
			raindrop.target = target;
			raindrop.master = self;
			raindrop.rnd = rnd;
			raindrop.w2sector = w2level.allSectorsData[ raindrop.cursector.Index() ];

			//raindrop.vel.xy = ( 10.0, 10.0 ) * ( sin( rainwaveOffset ) + 1.0 );
		}

		return;

		// Cornice raindrops effect:
		for ( int i = 0; i < corniceLines.Size(); i++ ) {
			Line l = corniceLines[ i ];
			double linelength = l.delta.Length();

			double minspawnheight = ( l.frontsector? l.frontsector.ceilingplane.d : 1e300 );

			if ( l.backsector && ( l.backsector.ceilingplane.d < minspawnheight ) )
				minspawnheight = l.backsector.ceilingplane.d;

			double spawnCoef = linelength / 96.0;

			int spawnAmount = int( floor( spawnCoef ) );
			double extraSpawnChange = spawnCoef - spawnAmount;

			if ( extraSpawnChange > 0.0 && rnd.FRandom( 0.0, 1.0 ) < extraSpawnChange )
				spawnAmount++;

			for ( int i = 0; i < spawnAmount; i++ ) {
				Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_CanopyRaindrop", ( l.v1.p + l.delta / linelength * rnd.FRandom( 0.0, linelength ), minspawnheight ) ) );
				raindrop.master = target;
				raindrop.rnd = rnd;
			}
		}
	} // of void DoRainEffects( void ) {}


	// WARNING: clients-unsynchronized execution.
	//Do not use builtin "Random()" or something similar!
	override void Tick() {
		PlayerInfo pl = players[ FriendPlayer ];

		if ( bDORMANT || !playeringame[ FriendPlayer ] || !pl.mo || FriendPlayer != consoleplayer )
			return;

		target = pl.mo;

		if ( !target ) {
			W2Global.Log( LL_Main, GetClassName() .. "::Tick(). Target player " .. FriendPlayer .. " disappeared, destroying self." );
			Destroy();
			return;
		}

		//console.printf( "W2PlH <" .. self .. "> target: <" .. target .. "> (Frnd <" .. pl.mo .. ">), useMultipl " .. useMultiplayerPos .. "-> " .. newpos );

		// Move the handler actor to the camera position:
		SetOrigin( ( pl.Camera? pl.Camera.pos : target.pos ), true );
		angle = target.angle;


		// Sound keepers pre-tick handling:
		for ( int i = 0; i < sndkeepers.Size(); i++ )
			sndkeepers[ i ].PreTick();

		//console.printf( GetClassName() .. "::Tick(). Maptime " .. level.maptime .. ", rnd.Random( 1, 10 ): " .. rnd.Random( 1, 10 ) .. "." );
		//Weathremum_Raindrop( Actor.Spawn( "Weathremum_Raindrop", target.pos + ( 0.0, 0.0, 96.0 ) ) ).rnd = rnd;

		//DoSectorEffects(); 	// Sector sounds (rain, winds);

		if ( !( level.frozen || globalfreeze ) ) {
			//DoRainEffects(); 	// Rain itself, raindrops from cornices.

			for ( int i = 0; i < 50; i++ ) {
				double angletheta = ( level.maptime * 2.0 + consoleplayer * 16.0 ) % 360.0;
				double spawndist = ( double( level.maptime + 345.0 ) % 250.0 ) / 250.0;

				vector2 raindropPos = pos.xy + ( cos( angletheta ), sin( angletheta ) ) * ( 8.0 + sqrt( spawndist ) * 764.0 );

				Weathremum_Raindrop raindrop = Weathremum_Raindrop( Actor.Spawn( "Weathremum_Raindrop", ( raindropPos, pos.z ) ) );
				raindrop.target = target;
				raindrop.master = self;
				raindrop.rnd = rnd;
				raindrop.w2sector = w2level.allSectorsData[ raindrop.cursector.Index() ];

				//raindrop.vel.xy = ( 10.0, 10.0 ) * ( sin( rainwaveOffset ) + 1.0 );
			}
		}


		// Sound keepers post-tick handling:
		for ( int i = 0; i < sndkeepers.Size(); i++ )
			sndkeepers[ i ].PostTick();

		//int a = 0.123456; // Next line is for debug (uncomment lines above):
		//sndkeepers[ W2ST_NormalSurface ].PostTick();

		Super.Tick();
	} // of override void Tick() {}

} // of class W2PlayerHandler: Actor {}
