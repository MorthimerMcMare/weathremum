// Weathremum general data classes & constants.

// AA: 0x7FAA0004.
// ZC: 0x7FAA0005 + 0x7FAA0006.
const WeathremumHandlerOrder = 0x7FAA0007;
const STAT_WEATHREMUM_MAINDECOR = Thinker.STAT_USER + 5;
const STAT_WEATHREMUM_EXTRADECOR = STAT_WEATHREMUM_MAINDECOR + 1;


enum EWeathremumHandleStatus {
	W2HS_Off = 0,		// Stopped, inactive sector sound.
	W2HS_Active,		// Active sector sound.
	W2HS_StopSuggestion	// Pre-stop (must be changed to something else every "WorldTick()").
}

enum EWeathremumSectorType {
	W2ST_None = 0,
	W2ST_Outdoor,
	W2ST_NextToOutdoor
}

enum EWeathremumFloorTerrain {
	W2FT_Default = 0,
	W2FT_SoftSurface,	// Grass, carpets, ...
	W2FT_HardSurface,	// Rocks, metal tiles, ...
	W2FT_Water,			// Non-damaging liquids.
	W2FT_Nukage,		// Damaging nukage and slime.
	W2FT_Incandecent,	// Lava and hot rocks (both harmful and harmless).

	W2FT_Normal = W2FT_Default,
	W2FT_User = 0xFF
}

enum EWeathremumSoundDirection {
	W2SD_Left = 0,
	W2SD_Right,

	W2SD_Quantity
}


// Not a default Doom-engine BLOCKMAP.
class W2BlockmapData {
	//int x, y; // Necessary?
	Array<W2SectorGroup> includedGroups;
}

class W2LevelGeneralData {
	// General data:
	Array<W2SectorData> allSectorsData;		// All of the sectors.

	Array<W2SectorGroup> allSectorGroups;	// Megasectors: uniting all neighbour sectors with same "w2type" to same unique "groupnum".
	Array<W2SectorGroup> realSectorGroups;	// Megasectors: same as above, but only for existing groups.

	Array<int> corniceLinesFlags;			// For the raindrops effect from a canopy.

	// W2Blockmap data and its methods:
	const BLOCKMAP_GRID_SIZE = 192.0;
	vector2 startWorldPos, endWorldPos;
	int blockmapMaxX, blockmapMaxY;
	Array<W2BlockmapData> blockmap;

	int, int WorldCellOffsets( vector2 worldpos ) {
		vector2 gridpos = ( clamp( worldpos.x, startWorldPos.x, endWorldPos.x - BLOCKMAP_GRID_SIZE ), clamp( worldpos.y, startWorldPos.y, endWorldPos.y - BLOCKMAP_GRID_SIZE ) );

		int x = int( ceil( ( gridpos.x - startWorldPos.x ) / BLOCKMAP_GRID_SIZE ) );
		int y = int( ceil( ( gridpos.y - startWorldPos.y ) / BLOCKMAP_GRID_SIZE ) );

		return x, y;
	}

	vector2 WorldOffsetByIndex( int x, int y ) {
		// Returns left-bottom point world position of the blockmap cell.
		return ( x * BLOCKMAP_GRID_SIZE + startWorldPos.x, y * BLOCKMAP_GRID_SIZE + startWorldPos.y );
	}

	W2BlockmapData GetWorldCell( vector2 worldpos ) {
		int cellx, celly;
		[ cellx, celly ] = WorldCellOffsets( worldpos );

		return blockmap[ celly * blockmapMaxY + cellx ];
	}

	W2BlockmapData GetCell( int x, int y ) {
		return blockmap[ clamp( y, 0, blockmapMaxY - 1 ) * blockmapMaxY + clamp( x, 0, blockmapMaxX - 1 ) ];
	}

	void CreateBlockmap( void ) {
		blockmap.Clear();

		if ( startWorldPos.x < endWorldPos.x && startWorldPos.y < endWorldPos.y ) {
			blockmapMaxX = int( ceil( ( endWorldPos.x - startWorldPos.x ) / BLOCKMAP_GRID_SIZE ) );
			blockmapMaxY = int( ceil( ( endWorldPos.y - startWorldPos.y ) / BLOCKMAP_GRID_SIZE ) );

			console.printf( "Blockmap max X/Y: (%i, %i).", blockmapMaxX, blockmapMaxY );
			console.printf( "World pos. Start " .. startWorldPos .. ", end " .. endWorldPos .. "." );

			for ( int i = 0; i < ( blockmapMaxX + 1 ) * ( blockmapMaxY + 1 ); i++ )
				blockmap.Push( new( 'W2BlockmapData' ) );
		} else {
			console.printf( "[Weathremum] " .. TEXTCOLOR_FIRE .. "Level data bound box corrupted: start " .. startWorldPos .. ", end " .. endWorldPos .. "." );
		}
	} // of void CreateBlockmap( void ) {}

	void Reinit( void ) {
		allSectorsData.Clear();
		allSectorGroups.Clear();
		realSectorGroups.Clear();
		corniceLinesFlags.Clear();

		startWorldPos = ( 1e300, 1e300 );
		endWorldPos = -startWorldPos;

		blockmapMaxX = blockmapMaxY = 0;
	}
}


class W2SectorData {
	Sector s;
	Array<Line> lines;
	//Array<int> lineindices; // Temporary, for the UI-scoped "RenderOverlay()".

	int groupnum;
	W2SectorGroup group;
	EWeathremumSectorType w2type;
	EWeathremumFloorTerrain w2floor;

	static W2SectorData Create( Sector initSector ) {
		W2SectorData newdata = new( 'W2SectorData' );
		newdata.s = initSector;
		newdata.groupnum = -1;
		newdata.w2type = W2ST_None;
		newdata.w2floor = W2FT_Default;

		return newdata;
	}
}

// Megasector/sectors union.
class W2SectorGroup {
	int num;

	EWeathremumHandleStatus status;
	W2SoundOrigin sndorigin[ W2SD_Quantity ];

	Array<Sector> sectors;
	Array<Line> lines;		// A perimeter lines.

	vector2 firstpos, lastpos; // Group bound box.

	static W2SectorGroup Create( int initnum = -1 ) {
		W2SectorGroup newdata = new( 'W2SectorGroup' );
		newdata.num = initnum;

		newdata.firstpos.x = 1e300;
		newdata.firstpos.y = 1e300;
		newdata.lastpos.x = -1e300;
		newdata.lastpos.y = -1e300;

		return newdata;
	}
}
