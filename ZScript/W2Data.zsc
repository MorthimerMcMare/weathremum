// Weathremum general data classes & constants.

// AA: 0x7FAA0004.
// ZC: 0x7FAA0005 + 0x7FAA0006.
const WeathremumHandlerOrder = 0x7FAA0007;
const STAT_WEATHREMUM_MAINDECOR = Thinker.STAT_USER + 5;
const STAT_WEATHREMUM_EXTRADECOR = STAT_WEATHREMUM_MAINDECOR + 1;


enum EWeathremumHandleStatus {
	W2HS_Off = 0,		// Stopped, inactive sector sound.
	W2HS_Active,		// Active sector sound.
	W2HS_StopSuggestion	// Pre-stop (must be changed to something else every "WorldTick()").
}

// Sector type changing may be checked in Doom 2 MAP20 or in Doom 1 E3M1.
enum EWeathremumSectorType {
	W2ST_None = -1,

	W2ST_NextToOutdoor,	// Wind (on sills/cornices).

	W2ST_NormalSurface,
	W2ST_SoftSurface,	// Grass, carpets, ...
	W2ST_Water,			// Non-damaging liquids.
	W2ST_Nukage,		// Damaging nukage and slime.
	W2ST_Incandecent,	// Lava and hot rocks (both harmful and harmless).
	W2ST_RockSurface,
	W2ST_MetalSurface,
	W2ST_PlasticSurface,

	W2ST_User,

	W2ST_Normal = W2ST_NormalSurface,
	W2ST_Default = W2ST_NormalSurface,
	W2ST_Wind = W2ST_NextToOutdoor
}

enum EWeathremumSoundDirection {
	W2SD_Left = 0,
	W2SD_Right,

	W2SD_Quantity
}


class W2LevelGeneralData {
	Array<W2SectorData> allSectorsData;		// All of the sectors.
	Array<W2LinedefData> allLinedefsData;	// All of the linedefs, mainly for the raindrops effect from a canopy.

	play W2SectorData GetSectorData( Sector s ) {
		return allSectorsData[ s.Index() ];
	}

	play W2LinedefData GetLinedefData( Line l ) {
		return allLinedefsData[ l.Index() ];
	}

	vector2 globalWindVector, blowWindVector;
}


class W2SectorData {
	Sector s;
	//Array<Line> lines;

	EWeathremumSectorType w2type;

	TextureID lastFloorTexture;
	//TextureID lastCeilingTexture;

	static W2SectorData Create( Sector initSector ) {
		W2SectorData newdata = new( 'W2SectorData' );
		newdata.s = initSector;
		newdata.w2type = W2ST_None;

		return newdata;
	}

	clearscope double GetHeight( void ) {
		return ( s.ceilingplane.d * s.ceilingplane.negiC - s.floorplane.d * s.floorplane.negiC );
	}
}

class W2LinedefData {
	Line l;

	vector2 deltadir;
	vector2 frontdir; // Normal to frontsector.
	double linelen;
	vector2 midpoint; // "(v1 + v2) / 2".

	bool isCornice;
	vector2 corniceDir;	// Really a cornice direction normal pointing indoor.
	vector2 cliffDir;	// Really a cliff direction normal pointing outdoor (tic-temporal field).

	// Updates every tic (if necessary):
	double ffloorz, fceilz;
	double bfloorz, bceilz;
	double floorsdiffz, ceilsdiffz;
	vector2 closestXYPointToPlayer;

	static W2LinedefData Create( Line initLinedef ) {
		W2LinedefData newdata = new( 'W2LinedefData' );
		newdata.l = initLinedef;
		newdata.linelen = initLinedef.delta.Length();
		newdata.deltadir = initLinedef.delta / newdata.linelen;
		newdata.frontdir = Actor.RotateVector( newdata.deltadir, 90.0 );
		newdata.midpoint = ( initLinedef.v1.p + initLinedef.v2.p ) / 2.0;
		newdata.isCornice = false;

		return newdata;
	}

	void UpdateSectorPlanesZ( void ) {
		Sector sec = l.frontsector;

		if ( sec ) {
			ffloorz = sec.floorplane.d * sec.floorplane.negiC;
			fceilz = sec.ceilingplane.d * sec.ceilingplane.negiC;
		}

		if ( sec = l.backsector ) {
			bfloorz = sec.floorplane.d * sec.floorplane.negiC;
			bceilz = sec.ceilingplane.d * sec.ceilingplane.negiC;

			floorsdiffz = ffloorz - bfloorz;
			ceilsdiffz = fceilz - bceilz;
		}
	}

	bool IsSectorsSpacesJointed( void ) {
		return ( ffloorz < bceilz && bfloorz < fceilz );
	}
}



class W2SoundKeeper play {
	EWeathremumHandleStatus status;
	EWeathremumSectorType w2type;
	String w2typename;

	String sndname;
	W2SoundOrigin sndorigin[ W2SD_Quantity ];

	static const String WeathremumSectorTypeNames[] = {
		"(Cornice/Sill)",
		"Default",
		"Soft",
		"Water",
		"Nukage",
		"Incandecent",
		"Rocks surface",
		"Metal surface",
		"Plastic surface"
	};

	Actor master;
	double minlength[ W2SD_Quantity ];

	vector3 minposxyz[ W2SD_Quantity ];
	vector3 ppos;

	void SuggestPos3( vector3 testpos, EWeathremumSoundDirection direction ) {
		if ( direction < 0 || direction >= W2SD_Quantity )
			direction = W2SD_Left;

		double testlength = ( ppos - testpos ).Length();

		if ( testlength < minlength[ direction ] ) {
			minlength[ direction ] = testlength;
			minposxyz[ direction ] = testpos;
			//if ( w2type == W2ST_Default )
			//	console.printf( "SuggestPos3(). Default type. testlength " .. testlength );

			status = W2HS_Active;
		}
	}

	void SuggestLine( W2LinedefData curlinedata, Sector lsec ) {
		// Minimal length, from linedef to the player position point.
		double curminlength;
		vector2 curposxy;

		Line curline = curlinedata.l;
		vector2 v1p = curline.v1.p;
		vector2 v2p = curline.v2.p;
		vector2 plp = ppos.xy;
		bool isPerp = false;

		if ( ( (v1p - plp) dot (v1p - v2p) <= 0.0 ) || ( (v2p - plp) dot (v2p - v1p) <= 0.0 ) ) {
			// If there's no way to draw a perpendicular, getting the nearest vertex:
			double length1 = ( plp - v1p ).Length();
			double length2 = ( plp - v2p ).Length();

			if ( length1 < length2 ) {
				curminlength = length1;
				curposxy = v1p;
			} else {
				curminlength = length2;
				curposxy = v2p;
			}

		} else {
			// Else, if possible, dropping a perpendicular to the linedef:
			double dlx = curline.delta.x;
			double dly = curline.delta.y;

			isPerp = true;

			if ( dlx == 0.0 ) {
				curposxy = (v1p.x, plp.y);

			} else if ( dly == 0.0 ) {
				curposxy = (plp.x, v1p.y);

			} else {
				curposxy.y = (dlx * (v1p.y * (dlx/dly) - v1p.x + plp.x) + dly*plp.y)/((dlx * dlx/dly) + dly);
				curposxy.x = (curposxy.y - v1p.y) * (dlx / dly) + v1p.x;
			}

			curminlength = ( curposxy - plp ).Length();
		}

		curlinedata.closestXYPointToPlayer = curposxy;

		//Debug.Print( "  SndKpr:SggLn(). minlen " .. int( curminlength ) .. ", perp " .. isPerp .. ", xy " .. W2Global.squeezeVector2( curposxy ) );

		double floorzdiff = abs( lsec.floorplane.d * lsec.floorplane.negiC - ppos.z );
		curminlength = sqrt( curminlength * curminlength + floorzdiff * floorzdiff );


		for ( int dir = 0; dir < W2SD_Quantity; dir++ )
			if ( minposxyz[ dir ].z > floorzdiff )
				minposxyz[ dir ].z = floorzdiff;

		// Belonging of the sound origin (to left/to right from current player):
		// TODO: use linedef half planes clipping on found point, not on vertices!!
		if ( curminlength < minlength[ W2SD_Left ] || curminlength < minlength[ W2SD_Right ] ) {
			vector2 vec2plleft = master.AngleToVector( master.angle - 90.0, 1.0 );

			double v1leftProjection = ( ( plp - v1p ) dot vec2plleft );
			double v2leftProjection = ( ( plp - v2p ) dot vec2plleft );

			//if ( loopdataindices[ i ] == 10 ) console.printf( loopdataindices[ i ] .. "v1leftProjection " .. v1leftProjection .. ", v2leftProjection " .. v2leftProjection );

			if ( ( v1leftProjection >= 0.0 || v2leftProjection >= 0.0 ) && ( curminlength < minlength[ W2SD_Left ] ) ) {
				minlength[ W2SD_Left ] = curminlength;
				minposxyz[ W2SD_Left ] = ( curposxy, minposxyz[ W2SD_Left ].z );
			}

			if ( ( v1leftProjection <= 0.0 || v2leftProjection <= 0.0 ) && ( curminlength < minlength[ W2SD_Right ] ) ) {
				minlength[ W2SD_Right ] = curminlength;
				minposxyz[ W2SD_Right ] = ( curposxy, minposxyz[ W2SD_Right ].z );
			}

			status = W2HS_Active;
		} // of if ( curminlength < minlength[ W2SD_Left ] || curminlength < minlength[ W2SD_Right ] ) {}

		//Debug.Print( "  - end len:[" .. int( minlength[ W2SD_Left ] ) .. "," .. int( minlength[ W2SD_Right ] ) .. "]; xyz:" .. W2Global.squeezeVector3( minposxyz[ W2SD_Left ] ) .. "," .. W2Global.squeezeVector3( minposxyz[ W2SD_Right ] ) .. "]" );
	} // of void SuggestLine( Line curline, Sector lsec ) {}


	static W2SoundKeeper Create( Sound initsnd, EWeathremumSectorType inittype, Actor initmaster, String inittypename = "" ) {
		W2SoundKeeper newkeeper = new( 'W2SoundKeeper' );

		newkeeper.status = W2HS_Off;
		newkeeper.sndname = initsnd;
		newkeeper.master = initmaster;
		newkeeper.w2type = inittype;

		if ( inittypename == "" && inittype < W2ST_User )
			newkeeper.w2typename = W2SoundKeeper.WeathremumSectorTypeNames[ inittype ];
		else
			newkeeper.w2typename = inittypename;

		return newkeeper;
	} // of static W2SoundKeeper Create( Sound initsnd, EWeathremumSectorType inittype, Actor initmaster, String inittypename = "" ) {}


	void PreTick( void ) {
		minlength[ W2SD_Left ] = minlength[ W2SD_Right ] = 999.9;
		ppos = master.pos + (0.0, 0.0, master.player.ViewHeight);

		minposxyz[ W2SD_Left ] = minposxyz[ W2SD_Right ] = (0.0, 0.0, -32767.0);

		// Suggest potential excess sounds to stop:
		if ( status == W2HS_Active )
			status = W2HS_StopSuggestion;
	}

	protected virtual double GetSoundAngleDistMul( double ang ) {
		double x = ( ang % 360.0 ) / 360.0;

		if ( x < 0.25 )
			return 0.2 * x + 0.95;
		else if ( x < 0.5 )
			return 1.8 * x + 0.5;
		else if ( x < 0.75 )
			return 4.4 * x - 0.8;

		return -6.2 * x + 7.15;
	}

	void PostTick( void ) {
		if ( status == W2HS_Active ) {
			// Creating new sound origins if they are not spawned yet:
			if ( !sndorigin[ W2SD_Left ] ) {

				for ( int j = 0; j < W2SD_Quantity; j++ ) {
					W2SoundOrigin sndactor = sndorigin[ j ] = W2SoundOrigin( Actor.Spawn( "W2SoundOrigin", (0.0, 0.0, 0.0) ) );
					sndactor.target = master; // Player.
					sndactor.seq = sndactor.StartSoundSequence( sndname, SeqNode.ENVIRONMENT );
				}

				String w2sectypeName = ( w2type != W2ST_None? WeathremumSectorTypeNames[ w2type ] : TEXTCOLOR_RED .. "<None>" .. LLCOLOR_DEBUG );
				Debug.Print( GetClassName() .. "::PostTick(). " .. TEXTCOLOR_DARKGREEN .. "+Started" .. LLCOLOR_DEBUG .. " sound of type \"" .. w2sectypeName .. "\" (".. w2type .. ")." );
			}


			// TODO: separate left/right lengths!!! Ears differentiating may 
			//be checked on MAP03, MAP11, MAP12 or MAP13 of the Doom 2.
			double anglediff[ W2SD_Quantity ];
			double adjustedlen[ W2SD_Quantity ];

			for ( int dir = 0; dir < W2SD_Quantity; dir++ )
				anglediff[ dir ] = ( atan2( minposxyz[ dir ].y - ppos.y, minposxyz[ dir ].x - ppos.x ) - master.angle ) % 360.0;

			adjustedlen[ W2SD_Left ] = minlength[ W2SD_Left ] * GetSoundAngleDistMul( anglediff[ W2SD_Left ] );
			adjustedlen[ W2SD_Right ] = minlength[ W2SD_Right ] * GetSoundAngleDistMul( anglediff[ W2SD_Right ] + 180.0 );

			//oppositelen[ W2SD_Left ] = adjustedlen[ W2SD_Right ] * 2.0; //GetOppositeSoundDistMul( anglediff[ W2SD_Right ] + 180.0 );
			//oppositelen[ W2SD_Right ] = adjustedlen[ W2SD_Left ] * 2.0; //GetOppositeSoundDistMul( anglediff[ W2SD_Left ] );

			for ( int dir = 0; dir < W2SD_Quantity; dir++ ) {
				int oppositedir = dir ^ W2SD_Left ^ W2SD_Right;

				minlength[ dir ] = min( adjustedlen[ dir ], adjustedlen[ oppositedir ] * 1.33 );

				//Actor debugmarker = Actor.Spawn( "tempLeftRightMarker", minposxyz[ dir ] );
				//debugmarker.scale.x *= ( ( dir == W2SD_Left ) * 2 ) - 1;
				//debugmarker.angle = ( 180.0 * ( dir == W2SD_Left ) );
			}

			// TODO: "pos.z" coordinate based on the closest (?) sector in current group.
			sndorigin[ W2SD_Left ].SetOrigin( ( master.Vec2Angle( minlength[ W2SD_Left ], master.angle + 90.0 ), master.pos.z ), true );
			sndorigin[ W2SD_Right ].SetOrigin( ( master.Vec2Angle( minlength[ W2SD_Right ], master.angle - 90.0 ), master.pos.z ), true );

		} else if ( status == W2HS_StopSuggestion ) {
			// Wiping out too far sounds:
			status = W2HS_Off;

			String w2sectypeName = ( w2type != W2ST_None? WeathremumSectorTypeNames[ w2type ] : TEXTCOLOR_RED .. "<None>" .. LLCOLOR_DEBUG );
			Debug.Print( GetClassName() .. "::PostTick(). " .. TEXTCOLOR_DARKRED .. "-Stopped" .. LLCOLOR_DEBUG .. " sound of type \"" .. w2sectypeName .. "\" (".. w2type .. ")." );

			for ( int i = 0; i < W2SD_Quantity; i++ ) {
				if ( sndorigin[ i ] ) {
					sndorigin[ i ].StopSoundSequence();
					sndorigin[ i ].Destroy();
				}
			}
		}
	} // of void PostTick( void ) {}

} // of class W2SoundKeeper {}
