// Weathremum visual & audial ambience actor classes.

// A base weather sound actor.
class W2SoundOrigin: Actor {

	SeqNode seq;
	bool justCreated;

	vector2 intersectionOffset;	// Direction to the first intersection.
	double intersectionAngle;	// Angle of the first intersection "atan2( intersectionOffset ) - player.angle".

	vector2 startInterpPos, endInterpPos;
	double interpSaveDistance;	// Saved distance to the player in the first interpolation tick.
	double interpLength;		// Length from start to end points (for "progress" percentage).
	double interpStepRange;
	int interpMaxTics, interpTic;

	Default {
		+NOINTERACTION; // Implies +NOGRAVITY and +NOBLOCKMAP.
		+DONTSPLASH;
		//+NOTONAUTOMAP;
	}

	// It's implied that "master" is a W2PlayerHandler and a "target" is a handling player actor.
	// [McM]: Not used since stereo sound test (!!!).
	void LinedefMove( vector2 nextpos ) {
		vector2 newsetpos = nextpos;

		double enddeltaposlen = ( nextpos - endInterpPos ).Length();
		endInterpPos = nextpos;

		if ( !justCreated ) {
			if ( enddeltaposlen > target.radius * 2.0 ) {
				startInterpPos = pos.xy;
				interpLength = ( endInterpPos - startInterpPos ).Length();
				interpStepRange = max( 8.0, interpLength / 10.0 );
				interpSaveDistance = ( pos.xy - master.pos.xy ).Length();
				interpMaxTics = interpTic = int( ceil( interpSaveDistance / interpStepRange ) );
			}
		} else {
			//interpMaxTics = 0;
		}

		vector2 deltapos = endInterpPos - pos.xy;
		double deltaposlen = deltapos.Length();

		if ( deltaposlen > 32.0 && interpLength > 32.0 && interpMaxTics > 0 ) {
			vector2 nextArclineStepPos = pos.xy + deltapos / abs( deltaposlen ) * min( interpStepRange, deltaposlen );
			vector2 deltaArclinePos = ( nextArclineStepPos - master.pos.xy );

			// Preventing interpolation from jamming:
			/*if ( abs( deltaArclinePos.x ) <= 2.0 )
				deltaArclinePos.x += ( deltaArclinePos.x == 0.0? 5.0 : deltaArclinePos.x / abs( deltaArclinePos.x ) * 5.0 );
			if ( abs( deltaArclinePos.y ) <= 2.0 )
				deltaArclinePos.y += ( deltaArclinePos.y == 0.0? 5.0 : deltaArclinePos.y / abs( deltaArclinePos.y ) * 5.0 );
			*/

			//double savedDistWeightPercent = clamp( deltaposlen / interpLength, 0.0, 1.0 );
			double savedDistWeightPercent = clamp( interpTic / double( interpMaxTics ), 0.0, 1.0 );

			//interpStepRange *= ( 1 - savedDistWeightPercent / 24.0 );
			//double savedDistWeightPercent = 1 - sqrt( clamp( deltaposlen / interpLength, 0.0, 1.0 ) );

			interpTic--;

			double masterDistToEnd = ( master.pos.xy - endInterpPos ).Length();
			newsetpos = master.pos.xy + ( deltaArclinePos / deltaArclinePos.Length() ) * ( savedDistWeightPercent * interpSaveDistance + ( 1.0 - savedDistWeightPercent ) * masterDistToEnd );

			//console.printf( self .. ". newsetpos: " .. newsetpos .. ", selectee dist Saved %f * %.2f, selected %f, deltaposlen %f, endInterpPos==nextpos " .. nextpos, interpSaveDistance, savedDistWeightPercent, ( savedDistWeightPercent * interpSaveDistance + ( 1.0 - savedDistWeightPercent ) * masterDistToEnd ), deltaposlen );

			//newsetpos = master.pos.xy + ( deltaArclinePos / deltaArclinePos.Length() ) * ( savedDistWeightPercent * interpSaveDistance ) + ( 1.0 - savedDistWeightPercent ) * ( endInterpPos - pos.xy );
			//console.printf( self .. ". newsetpos: " .. newsetpos .. ". deltaArclinePos.Length() %f, savedDistWeightPercent %f, masterDistToEnd %f.", deltaArclinePos.Length(), savedDistWeightPercent, masterDistToEnd );
			//console.printf( self .. ". newsetpos " .. newsetpos .. ", deltaArclinePos: " .. deltaArclinePos .. ", deltapos %f", deltapos );
		}

		SetOrigin( ( newsetpos, target.pos.z ), false );
	}

	override void Tick() {
		//prevpos = pos;
		// No "Super.Tick()" is necessary.
	}

	override void OnDestroy() {
		StopSoundSequence();
		Super.OnDestroy();
	}
}


class Weathremum_Raindrop: Actor {
	W2SectorData w2sector;

	Default {
		+MISSILE;
		-SOLID;
		+NOBLOCKMAP;
		+NOTONAUTOMAP;
		+DONTSPLASH;
		Height 0;
		Radius 1;
		Mass 3;
		RenderStyle "Translucent";
	}

	override void BeginPlay() {
		ChangeStatNum( STAT_WEATHREMUM_MAINDECOR ); // 75.
		Super.BeginPlay();
	}

	override void PostBeginPlay() {
		if ( !cursector || ( ceilingpic != skyflatnum ) )
			Destroy();

		//console.printf( self .. ". master.FriendPlayer != consoleplayer: "  .. master.FriendPlayer .. "!=" .. consoleplayer );

		if ( master.FriendPlayer != consoleplayer )
			bINVISIBLE = true;

		double minspawnheight = ( master? min( ceilingz, target.pos.z + target.height + 256.0 ) : ceilingz );

		SetZ( minspawnheight - FRandom( 8.0, 25.0 ) );

		vel.z = -35.0;
		scale = ( FRandom( 0.1, 0.3 ), FRandom( 0.75, 2 ) );
		alpha = FRandom( 0.2, 0.7 );

		ClearInterpolation();
	}

	override void Tick() {
		if ( master && pos.z - master.pos.z < -256.0 ) {
			Destroy();
			return;
		}

		Super.Tick();
	}

	void RaindropPreSplash( void ) {
		if ( w2sector && w2sector.w2floor >= W2FT_Water ) {

			if ( w2sector.w2floor == W2FT_Water ) {
				if ( target && Distance2D( target ) <= 512.0 ) {
					for ( int i = 0; i < 3; i++ )
						Actor.Spawn( "Weathremum_WaterRipple", pos + ( FRandom( -4.0, 4.0 ), FRandom( -4.0, 4.0 ), 0.0 ) );
				}

			} else if ( !Random( 0, 7 ) ) {
				if ( w2sector.w2floor == W2FT_Incandecent || ( w2sector.w2floor == W2FT_Nukage && !Random( 0, 3 ) ) )
					Actor.Spawn( "Weathremum_NukageVapor", pos + ( 0.0, 0.0, 5.0 ) );
			}

			Destroy();
			return;
		}

		vel = (0, 0, 0);
		scale.y = 0.75;
		alpha *= 0.4;

		frame = Random( 1, 2 );
		tics = frame; //Random( 2, 3 );

		SetZ( floorz );
		ClearInterpolation();

		// Optimizing out raindrop splashes on the static surfaces:
		if ( ( cursector.floordata is 'Mover' ) )
			bMOVEWITHSECTOR = true;
	}

	void RaindropSplash( void ) {
		if ( w2sector && w2sector.w2floor == W2FT_HardSurface ) {
			Actor.Spawn( "Weathremum_HardSurfaceRaindropBreak", pos + ( FRandom( -4.0, 4.0 ), FRandom( -4.0, 4.0 ), 0.0 ) );

			Destroy();
			return;
		}

		bFLATSPRITE = bROLLSPRITE = bFLOORCLIP = bCORPSE = true;

		// General visual tweaks:
		ClearInterpolation();
		A_SetRenderStyle( 0.1, STYLE_Add );
		scale = ( 1, 1 ) * FRandom( 0.1, 0.25 );
		frame = Random( 0, 4 );

		// Setting the position on a slopes:
		vector3 norm = cursector.floorplane.normal;
		vector2 norm_p1 = ( norm.x != 0 || norm.y != 0 )? (norm.x, norm.y).Unit() : (0, 0);
		vector2 norm_p2 = ((norm.x, norm.y).Length(), norm.z );

		angle = atan2( norm_p1.y, norm_p1.x );
		pitch = atan2( norm_p2.x, norm_p2.y );
		roll = FRandom( 0.0, 360.0 );
	}

	States {
	Spawn:
		RAIN N -1;
		Stop;
	Death:
		RAIN "#" 0 RaindropPreSplash();
		RAIN "##" 1 { frame++; }
		RWIN "#" 0 {
			if ( ( level.maptime & 1 ) || ( target && Distance2D( target ) > 512.0 ) )
				Destroy();
			else
				RaindropSplash();
		}
		RWIN "#" 1 A_FadeOut( 0.005 );
		Wait;
	}
} // of class Weathremum_Raindrop: Actor {}

class Weathremum_CanopyRaindrop: Weathremum_Raindrop {
	override void PostBeginPlay() {
		vel.z = 0.0;
		scale = ( FRandom( 0.1, 0.5 ), FRandom( 0.2, 0.5 ) );
		alpha = FRandom( 0.3, 0.7 );
	}

	override void Tick() {
		if ( !bCORPSE && !globalfreeze && !level.frozen ) {
			if ( vel.z > -35.0 )
				vel.z -= 1.5;

			scale.y *= 1.1;

			if ( scale.x > 0.2 )
				scale.x *= 0.95;
		}

		Super.Tick();
	}

	States {
	Death:
		RAIN "#" 1 RaindropPreSplash();
		RAIN "##" 1 { frame++; }
		RWIN "#" 0 {
			if ( target && Distance2D( target ) > 512.0 )
				Destroy();
			else
				RaindropSplash();
		}
		RWIN "#" 1 A_FadeOut( 0.005 );
		Wait;
	}
}

class Weathremum_WaterRipple: Actor {
	Default {
		+NOTONAUTOMAP;
		+NOINTERACTION;
		+FLATSPRITE;
		+FLOORCLIP;
		RenderStyle "Translucent";
	}

	override void BeginPlay() {
		ChangeStatNum( STAT_WEATHREMUM_EXTRADECOR );
		Super.BeginPlay();
	}

	override void PostBeginPlay() {
		frame = Random( 0, 3 );
		alpha = FRandom( 0.095, 0.333 );
		scale.x = scale.y = FRandom( 0.1, 0.25 );
	}

	override void Tick() {
		if ( !globalfreeze && !level.frozen ) {
			Super.Tick();

			scale.y = ( scale.x += 0.025 );
			A_FadeOut( 0.025 );
		}
	}

	States {
	Spawn:
		WRPL "#" 2 {
			frame = ( frame + 1 ) % 4;
		}
		Loop;
	}
}

/*class Weathremum_WaterRipple: Actor {
	Default {
		+NOTONAUTOMAP;
		+NOINTERACTION;
		+FLATSPRITE;
		+FLOORCLIP;
		RenderStyle "Add";
	}

	override void BeginPlay() {
		ChangeStatNum( STAT_WEATHREMUM_EXTRADECOR );
		Super.BeginPlay();
	}

	override void PostBeginPlay() {
		//frame = Random( 0, 3 );
		alpha = FRandom( 0.03, 0.33 );
		scale.x = scale.y = FRandom( 0.001, 0.05 );
	}

	override void Tick() {
		if ( !globalfreeze && !level.frozen ) {
			Super.Tick();

			scale.y = ( scale.x += 0.005 );
			A_FadeOut( 0.025 );
		}
	}

	States {
	Spawn:
		GRPL A -1;
		Stop;
	}
}*/

class Weathremum_HardSurfaceRaindropBreak: Actor {
	Default {
		+NOTONAUTOMAP;
		+NOINTERACTION;
		+FLATSPRITE;
		+FLOORCLIP;
		RenderStyle "Translucent";
	}

	override void BeginPlay() {
		ChangeStatNum( STAT_WEATHREMUM_EXTRADECOR );
		Super.BeginPlay();
	}

	override void PostBeginPlay() {
		frame = Random( 0, 3 );
		alpha = FRandom( 0.5, 1.0 );
		scale.x = scale.y = FRandom( 0.175, 0.45 );
	}

	override void Tick() {
		if ( !globalfreeze && !level.frozen ) {
			frame = ( frame + 1 ) % 4;
			A_FadeOut( 0.175 );
		}
	}

	States {
	Spawn:
		WRPL "#" -1;
		Stop;
	}	
}

class Weathremum_NukageVapor: Actor {
	Default {
		+NOTONAUTOMAP;
		+NOINTERACTION;
		+FLATSPRITE;
		RenderStyle "Add";
	}

	override void BeginPlay() {
		ChangeStatNum( STAT_WEATHREMUM_EXTRADECOR );
		Super.BeginPlay();
	}

	override void PostBeginPlay() {
		vel.z = FRandom( 0.0, 5.0 );
		alpha = FRandom( 0.075, 0.33 );
		scale.x = scale.y = FRandom( 0.25, 0.75 ) * FRandomPick( -1.0, 1.0 );
	}

	States {
	Spawn:
		RAIS ABCDEFGHI 2 A_FadeOut( 0.05 );
		Stop;
	}
}
